// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: priv/secrets/v1alpha1/secrets.proto

package secretsv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "go.jetpack.io/pkg/api/gen/priv/secrets/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SecretsServiceName is the fully-qualified name of the SecretsService service.
	SecretsServiceName = "priv.secrets.v1alpha1.SecretsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SecretsServiceBatchProcedure is the fully-qualified name of the SecretsService's Batch RPC.
	SecretsServiceBatchProcedure = "/priv.secrets.v1alpha1.SecretsService/Batch"
	// SecretsServiceDeleteSecretProcedure is the fully-qualified name of the SecretsService's
	// DeleteSecret RPC.
	SecretsServiceDeleteSecretProcedure = "/priv.secrets.v1alpha1.SecretsService/DeleteSecret"
	// SecretsServiceListSecretsProcedure is the fully-qualified name of the SecretsService's
	// ListSecrets RPC.
	SecretsServiceListSecretsProcedure = "/priv.secrets.v1alpha1.SecretsService/ListSecrets"
	// SecretsServicePatchSecretProcedure is the fully-qualified name of the SecretsService's
	// PatchSecret RPC.
	SecretsServicePatchSecretProcedure = "/priv.secrets.v1alpha1.SecretsService/PatchSecret"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	secretsServiceServiceDescriptor            = v1alpha1.File_priv_secrets_v1alpha1_secrets_proto.Services().ByName("SecretsService")
	secretsServiceBatchMethodDescriptor        = secretsServiceServiceDescriptor.Methods().ByName("Batch")
	secretsServiceDeleteSecretMethodDescriptor = secretsServiceServiceDescriptor.Methods().ByName("DeleteSecret")
	secretsServiceListSecretsMethodDescriptor  = secretsServiceServiceDescriptor.Methods().ByName("ListSecrets")
	secretsServicePatchSecretMethodDescriptor  = secretsServiceServiceDescriptor.Methods().ByName("PatchSecret")
)

// SecretsServiceClient is a client for the priv.secrets.v1alpha1.SecretsService service.
type SecretsServiceClient interface {
	// Batch composes multiple CRUD requests into a single request.
	Batch(context.Context, *connect.Request[v1alpha1.BatchRequest]) (*connect.Response[v1alpha1.BatchResponse], error)
	// DeleteSecret deletes an existing Secret.
	DeleteSecret(context.Context, *connect.Request[v1alpha1.DeleteSecretRequest]) (*connect.Response[v1alpha1.DeleteSecretResponse], error)
	// ListSecrets returns a list of Secrets for a given Project.
	ListSecrets(context.Context, *connect.Request[v1alpha1.ListSecretsRequest]) (*connect.Response[v1alpha1.ListSecretsResponse], error)
	// PatchSecret partially updates an existing Secret, or creates it if it doesn't exist.
	PatchSecret(context.Context, *connect.Request[v1alpha1.PatchSecretRequest]) (*connect.Response[v1alpha1.PatchSecretResponse], error)
}

// NewSecretsServiceClient constructs a client for the priv.secrets.v1alpha1.SecretsService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSecretsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SecretsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &secretsServiceClient{
		batch: connect.NewClient[v1alpha1.BatchRequest, v1alpha1.BatchResponse](
			httpClient,
			baseURL+SecretsServiceBatchProcedure,
			connect.WithSchema(secretsServiceBatchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSecret: connect.NewClient[v1alpha1.DeleteSecretRequest, v1alpha1.DeleteSecretResponse](
			httpClient,
			baseURL+SecretsServiceDeleteSecretProcedure,
			connect.WithSchema(secretsServiceDeleteSecretMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listSecrets: connect.NewClient[v1alpha1.ListSecretsRequest, v1alpha1.ListSecretsResponse](
			httpClient,
			baseURL+SecretsServiceListSecretsProcedure,
			connect.WithSchema(secretsServiceListSecretsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		patchSecret: connect.NewClient[v1alpha1.PatchSecretRequest, v1alpha1.PatchSecretResponse](
			httpClient,
			baseURL+SecretsServicePatchSecretProcedure,
			connect.WithSchema(secretsServicePatchSecretMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// secretsServiceClient implements SecretsServiceClient.
type secretsServiceClient struct {
	batch        *connect.Client[v1alpha1.BatchRequest, v1alpha1.BatchResponse]
	deleteSecret *connect.Client[v1alpha1.DeleteSecretRequest, v1alpha1.DeleteSecretResponse]
	listSecrets  *connect.Client[v1alpha1.ListSecretsRequest, v1alpha1.ListSecretsResponse]
	patchSecret  *connect.Client[v1alpha1.PatchSecretRequest, v1alpha1.PatchSecretResponse]
}

// Batch calls priv.secrets.v1alpha1.SecretsService.Batch.
func (c *secretsServiceClient) Batch(ctx context.Context, req *connect.Request[v1alpha1.BatchRequest]) (*connect.Response[v1alpha1.BatchResponse], error) {
	return c.batch.CallUnary(ctx, req)
}

// DeleteSecret calls priv.secrets.v1alpha1.SecretsService.DeleteSecret.
func (c *secretsServiceClient) DeleteSecret(ctx context.Context, req *connect.Request[v1alpha1.DeleteSecretRequest]) (*connect.Response[v1alpha1.DeleteSecretResponse], error) {
	return c.deleteSecret.CallUnary(ctx, req)
}

// ListSecrets calls priv.secrets.v1alpha1.SecretsService.ListSecrets.
func (c *secretsServiceClient) ListSecrets(ctx context.Context, req *connect.Request[v1alpha1.ListSecretsRequest]) (*connect.Response[v1alpha1.ListSecretsResponse], error) {
	return c.listSecrets.CallUnary(ctx, req)
}

// PatchSecret calls priv.secrets.v1alpha1.SecretsService.PatchSecret.
func (c *secretsServiceClient) PatchSecret(ctx context.Context, req *connect.Request[v1alpha1.PatchSecretRequest]) (*connect.Response[v1alpha1.PatchSecretResponse], error) {
	return c.patchSecret.CallUnary(ctx, req)
}

// SecretsServiceHandler is an implementation of the priv.secrets.v1alpha1.SecretsService service.
type SecretsServiceHandler interface {
	// Batch composes multiple CRUD requests into a single request.
	Batch(context.Context, *connect.Request[v1alpha1.BatchRequest]) (*connect.Response[v1alpha1.BatchResponse], error)
	// DeleteSecret deletes an existing Secret.
	DeleteSecret(context.Context, *connect.Request[v1alpha1.DeleteSecretRequest]) (*connect.Response[v1alpha1.DeleteSecretResponse], error)
	// ListSecrets returns a list of Secrets for a given Project.
	ListSecrets(context.Context, *connect.Request[v1alpha1.ListSecretsRequest]) (*connect.Response[v1alpha1.ListSecretsResponse], error)
	// PatchSecret partially updates an existing Secret, or creates it if it doesn't exist.
	PatchSecret(context.Context, *connect.Request[v1alpha1.PatchSecretRequest]) (*connect.Response[v1alpha1.PatchSecretResponse], error)
}

// NewSecretsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSecretsServiceHandler(svc SecretsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	secretsServiceBatchHandler := connect.NewUnaryHandler(
		SecretsServiceBatchProcedure,
		svc.Batch,
		connect.WithSchema(secretsServiceBatchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	secretsServiceDeleteSecretHandler := connect.NewUnaryHandler(
		SecretsServiceDeleteSecretProcedure,
		svc.DeleteSecret,
		connect.WithSchema(secretsServiceDeleteSecretMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	secretsServiceListSecretsHandler := connect.NewUnaryHandler(
		SecretsServiceListSecretsProcedure,
		svc.ListSecrets,
		connect.WithSchema(secretsServiceListSecretsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	secretsServicePatchSecretHandler := connect.NewUnaryHandler(
		SecretsServicePatchSecretProcedure,
		svc.PatchSecret,
		connect.WithSchema(secretsServicePatchSecretMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/priv.secrets.v1alpha1.SecretsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SecretsServiceBatchProcedure:
			secretsServiceBatchHandler.ServeHTTP(w, r)
		case SecretsServiceDeleteSecretProcedure:
			secretsServiceDeleteSecretHandler.ServeHTTP(w, r)
		case SecretsServiceListSecretsProcedure:
			secretsServiceListSecretsHandler.ServeHTTP(w, r)
		case SecretsServicePatchSecretProcedure:
			secretsServicePatchSecretHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSecretsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSecretsServiceHandler struct{}

func (UnimplementedSecretsServiceHandler) Batch(context.Context, *connect.Request[v1alpha1.BatchRequest]) (*connect.Response[v1alpha1.BatchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("priv.secrets.v1alpha1.SecretsService.Batch is not implemented"))
}

func (UnimplementedSecretsServiceHandler) DeleteSecret(context.Context, *connect.Request[v1alpha1.DeleteSecretRequest]) (*connect.Response[v1alpha1.DeleteSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("priv.secrets.v1alpha1.SecretsService.DeleteSecret is not implemented"))
}

func (UnimplementedSecretsServiceHandler) ListSecrets(context.Context, *connect.Request[v1alpha1.ListSecretsRequest]) (*connect.Response[v1alpha1.ListSecretsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("priv.secrets.v1alpha1.SecretsService.ListSecrets is not implemented"))
}

func (UnimplementedSecretsServiceHandler) PatchSecret(context.Context, *connect.Request[v1alpha1.PatchSecretRequest]) (*connect.Response[v1alpha1.PatchSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("priv.secrets.v1alpha1.SecretsService.PatchSecret is not implemented"))
}
