//*
// API to manage token service

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: priv/tokenservice/v1alpha1/tokenservice.proto

package tokenservicev1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "go.jetpack.io/pkg/api/gen/priv/tokenservice/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TokenServiceName is the fully-qualified name of the TokenService service.
	TokenServiceName = "priv.tokenservice.v1alpha1.TokenService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TokenServiceGetAccessTokenProcedure is the fully-qualified name of the TokenService's
	// GetAccessToken RPC.
	TokenServiceGetAccessTokenProcedure = "/priv.tokenservice.v1alpha1.TokenService/GetAccessToken"
	// TokenServiceCreateTokenProcedure is the fully-qualified name of the TokenService's CreateToken
	// RPC.
	TokenServiceCreateTokenProcedure = "/priv.tokenservice.v1alpha1.TokenService/CreateToken"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tokenServiceServiceDescriptor              = v1alpha1.File_priv_tokenservice_v1alpha1_tokenservice_proto.Services().ByName("TokenService")
	tokenServiceGetAccessTokenMethodDescriptor = tokenServiceServiceDescriptor.Methods().ByName("GetAccessToken")
	tokenServiceCreateTokenMethodDescriptor    = tokenServiceServiceDescriptor.Methods().ByName("CreateToken")
)

// TokenServiceClient is a client for the priv.tokenservice.v1alpha1.TokenService service.
type TokenServiceClient interface {
	GetAccessToken(context.Context, *connect.Request[v1alpha1.GetAccessTokenRequest]) (*connect.Response[v1alpha1.GetAccessTokenResponse], error)
	CreateToken(context.Context, *connect.Request[v1alpha1.CreateTokenRequest]) (*connect.Response[v1alpha1.CreateTokenResponse], error)
}

// NewTokenServiceClient constructs a client for the priv.tokenservice.v1alpha1.TokenService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTokenServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TokenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tokenServiceClient{
		getAccessToken: connect.NewClient[v1alpha1.GetAccessTokenRequest, v1alpha1.GetAccessTokenResponse](
			httpClient,
			baseURL+TokenServiceGetAccessTokenProcedure,
			connect.WithSchema(tokenServiceGetAccessTokenMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createToken: connect.NewClient[v1alpha1.CreateTokenRequest, v1alpha1.CreateTokenResponse](
			httpClient,
			baseURL+TokenServiceCreateTokenProcedure,
			connect.WithSchema(tokenServiceCreateTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// tokenServiceClient implements TokenServiceClient.
type tokenServiceClient struct {
	getAccessToken *connect.Client[v1alpha1.GetAccessTokenRequest, v1alpha1.GetAccessTokenResponse]
	createToken    *connect.Client[v1alpha1.CreateTokenRequest, v1alpha1.CreateTokenResponse]
}

// GetAccessToken calls priv.tokenservice.v1alpha1.TokenService.GetAccessToken.
func (c *tokenServiceClient) GetAccessToken(ctx context.Context, req *connect.Request[v1alpha1.GetAccessTokenRequest]) (*connect.Response[v1alpha1.GetAccessTokenResponse], error) {
	return c.getAccessToken.CallUnary(ctx, req)
}

// CreateToken calls priv.tokenservice.v1alpha1.TokenService.CreateToken.
func (c *tokenServiceClient) CreateToken(ctx context.Context, req *connect.Request[v1alpha1.CreateTokenRequest]) (*connect.Response[v1alpha1.CreateTokenResponse], error) {
	return c.createToken.CallUnary(ctx, req)
}

// TokenServiceHandler is an implementation of the priv.tokenservice.v1alpha1.TokenService service.
type TokenServiceHandler interface {
	GetAccessToken(context.Context, *connect.Request[v1alpha1.GetAccessTokenRequest]) (*connect.Response[v1alpha1.GetAccessTokenResponse], error)
	CreateToken(context.Context, *connect.Request[v1alpha1.CreateTokenRequest]) (*connect.Response[v1alpha1.CreateTokenResponse], error)
}

// NewTokenServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTokenServiceHandler(svc TokenServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tokenServiceGetAccessTokenHandler := connect.NewUnaryHandler(
		TokenServiceGetAccessTokenProcedure,
		svc.GetAccessToken,
		connect.WithSchema(tokenServiceGetAccessTokenMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tokenServiceCreateTokenHandler := connect.NewUnaryHandler(
		TokenServiceCreateTokenProcedure,
		svc.CreateToken,
		connect.WithSchema(tokenServiceCreateTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/priv.tokenservice.v1alpha1.TokenService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TokenServiceGetAccessTokenProcedure:
			tokenServiceGetAccessTokenHandler.ServeHTTP(w, r)
		case TokenServiceCreateTokenProcedure:
			tokenServiceCreateTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTokenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTokenServiceHandler struct{}

func (UnimplementedTokenServiceHandler) GetAccessToken(context.Context, *connect.Request[v1alpha1.GetAccessTokenRequest]) (*connect.Response[v1alpha1.GetAccessTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("priv.tokenservice.v1alpha1.TokenService.GetAccessToken is not implemented"))
}

func (UnimplementedTokenServiceHandler) CreateToken(context.Context, *connect.Request[v1alpha1.CreateTokenRequest]) (*connect.Response[v1alpha1.CreateTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("priv.tokenservice.v1alpha1.TokenService.CreateToken is not implemented"))
}
