//*
// API to manage nix features

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: priv/nix/v1alpha1/nix.proto

package nixv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "go.jetpack.io/pkg/api/gen/priv/nix/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NixServiceName is the fully-qualified name of the NixService service.
	NixServiceName = "priv.nix.v1alpha1.NixService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NixServiceGetBinCacheProcedure is the fully-qualified name of the NixService's GetBinCache RPC.
	NixServiceGetBinCacheProcedure = "/priv.nix.v1alpha1.NixService/GetBinCache"
	// NixServiceGetAWSCredentialsProcedure is the fully-qualified name of the NixService's
	// GetAWSCredentials RPC.
	NixServiceGetAWSCredentialsProcedure = "/priv.nix.v1alpha1.NixService/GetAWSCredentials"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	nixServiceServiceDescriptor                 = v1alpha1.File_priv_nix_v1alpha1_nix_proto.Services().ByName("NixService")
	nixServiceGetBinCacheMethodDescriptor       = nixServiceServiceDescriptor.Methods().ByName("GetBinCache")
	nixServiceGetAWSCredentialsMethodDescriptor = nixServiceServiceDescriptor.Methods().ByName("GetAWSCredentials")
)

// NixServiceClient is a client for the priv.nix.v1alpha1.NixService service.
type NixServiceClient interface {
	GetBinCache(context.Context, *connect.Request[v1alpha1.GetBinCacheRequest]) (*connect.Response[v1alpha1.GetBinCacheResponse], error)
	GetAWSCredentials(context.Context, *connect.Request[v1alpha1.GetAWSCredentialsRequest]) (*connect.Response[v1alpha1.GetAWSCredentialsResponse], error)
}

// NewNixServiceClient constructs a client for the priv.nix.v1alpha1.NixService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNixServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NixServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &nixServiceClient{
		getBinCache: connect.NewClient[v1alpha1.GetBinCacheRequest, v1alpha1.GetBinCacheResponse](
			httpClient,
			baseURL+NixServiceGetBinCacheProcedure,
			connect.WithSchema(nixServiceGetBinCacheMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getAWSCredentials: connect.NewClient[v1alpha1.GetAWSCredentialsRequest, v1alpha1.GetAWSCredentialsResponse](
			httpClient,
			baseURL+NixServiceGetAWSCredentialsProcedure,
			connect.WithSchema(nixServiceGetAWSCredentialsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// nixServiceClient implements NixServiceClient.
type nixServiceClient struct {
	getBinCache       *connect.Client[v1alpha1.GetBinCacheRequest, v1alpha1.GetBinCacheResponse]
	getAWSCredentials *connect.Client[v1alpha1.GetAWSCredentialsRequest, v1alpha1.GetAWSCredentialsResponse]
}

// GetBinCache calls priv.nix.v1alpha1.NixService.GetBinCache.
func (c *nixServiceClient) GetBinCache(ctx context.Context, req *connect.Request[v1alpha1.GetBinCacheRequest]) (*connect.Response[v1alpha1.GetBinCacheResponse], error) {
	return c.getBinCache.CallUnary(ctx, req)
}

// GetAWSCredentials calls priv.nix.v1alpha1.NixService.GetAWSCredentials.
func (c *nixServiceClient) GetAWSCredentials(ctx context.Context, req *connect.Request[v1alpha1.GetAWSCredentialsRequest]) (*connect.Response[v1alpha1.GetAWSCredentialsResponse], error) {
	return c.getAWSCredentials.CallUnary(ctx, req)
}

// NixServiceHandler is an implementation of the priv.nix.v1alpha1.NixService service.
type NixServiceHandler interface {
	GetBinCache(context.Context, *connect.Request[v1alpha1.GetBinCacheRequest]) (*connect.Response[v1alpha1.GetBinCacheResponse], error)
	GetAWSCredentials(context.Context, *connect.Request[v1alpha1.GetAWSCredentialsRequest]) (*connect.Response[v1alpha1.GetAWSCredentialsResponse], error)
}

// NewNixServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNixServiceHandler(svc NixServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	nixServiceGetBinCacheHandler := connect.NewUnaryHandler(
		NixServiceGetBinCacheProcedure,
		svc.GetBinCache,
		connect.WithSchema(nixServiceGetBinCacheMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	nixServiceGetAWSCredentialsHandler := connect.NewUnaryHandler(
		NixServiceGetAWSCredentialsProcedure,
		svc.GetAWSCredentials,
		connect.WithSchema(nixServiceGetAWSCredentialsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/priv.nix.v1alpha1.NixService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NixServiceGetBinCacheProcedure:
			nixServiceGetBinCacheHandler.ServeHTTP(w, r)
		case NixServiceGetAWSCredentialsProcedure:
			nixServiceGetAWSCredentialsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNixServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNixServiceHandler struct{}

func (UnimplementedNixServiceHandler) GetBinCache(context.Context, *connect.Request[v1alpha1.GetBinCacheRequest]) (*connect.Response[v1alpha1.GetBinCacheResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("priv.nix.v1alpha1.NixService.GetBinCache is not implemented"))
}

func (UnimplementedNixServiceHandler) GetAWSCredentials(context.Context, *connect.Request[v1alpha1.GetAWSCredentialsRequest]) (*connect.Response[v1alpha1.GetAWSCredentialsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("priv.nix.v1alpha1.NixService.GetAWSCredentials is not implemented"))
}
