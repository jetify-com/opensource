// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/kai/v1/kai.proto

package kai_v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "go.jetpack.io/kai/gen/api/kai/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KaiServiceName is the fully-qualified name of the KaiService service.
	KaiServiceName = "api.kai.v1.KaiService"
)

// KaiServiceClient is a client for the api.kai.v1.KaiService service.
type KaiServiceClient interface {
	GetShellCommand(context.Context, *connect_go.Request[v1.GetShellCommandRequest]) (*connect_go.Response[v1.GetShellCommandResponse], error)
}

// NewKaiServiceClient constructs a client for the api.kai.v1.KaiService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKaiServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KaiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kaiServiceClient{
		getShellCommand: connect_go.NewClient[v1.GetShellCommandRequest, v1.GetShellCommandResponse](
			httpClient,
			baseURL+"/api.kai.v1.KaiService/GetShellCommand",
			opts...,
		),
	}
}

// kaiServiceClient implements KaiServiceClient.
type kaiServiceClient struct {
	getShellCommand *connect_go.Client[v1.GetShellCommandRequest, v1.GetShellCommandResponse]
}

// GetShellCommand calls api.kai.v1.KaiService.GetShellCommand.
func (c *kaiServiceClient) GetShellCommand(ctx context.Context, req *connect_go.Request[v1.GetShellCommandRequest]) (*connect_go.Response[v1.GetShellCommandResponse], error) {
	return c.getShellCommand.CallUnary(ctx, req)
}

// KaiServiceHandler is an implementation of the api.kai.v1.KaiService service.
type KaiServiceHandler interface {
	GetShellCommand(context.Context, *connect_go.Request[v1.GetShellCommandRequest]) (*connect_go.Response[v1.GetShellCommandResponse], error)
}

// NewKaiServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKaiServiceHandler(svc KaiServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/api.kai.v1.KaiService/GetShellCommand", connect_go.NewUnaryHandler(
		"/api.kai.v1.KaiService/GetShellCommand",
		svc.GetShellCommand,
		opts...,
	))
	return "/api.kai.v1.KaiService/", mux
}

// UnimplementedKaiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKaiServiceHandler struct{}

func (UnimplementedKaiServiceHandler) GetShellCommand(context.Context, *connect_go.Request[v1.GetShellCommandRequest]) (*connect_go.Response[v1.GetShellCommandResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.kai.v1.KaiService.GetShellCommand is not implemented"))
}
