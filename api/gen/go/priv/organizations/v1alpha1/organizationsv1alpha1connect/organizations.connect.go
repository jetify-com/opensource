//*
// API to manage  an organization.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: priv/organizations/v1alpha1/organizations.proto

package organizationsv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "go.jetpack.io/axiom/api/gen/priv/organizations/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// OrganizationsServiceName is the fully-qualified name of the OrganizationsService service.
	OrganizationsServiceName = "priv.organizations.v1alpha1.OrganizationsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrganizationsServiceGetOrganizationProcedure is the fully-qualified name of the
	// OrganizationsService's GetOrganization RPC.
	OrganizationsServiceGetOrganizationProcedure = "/priv.organizations.v1alpha1.OrganizationsService/GetOrganization"
	// OrganizationsServiceCreateOrganizationProcedure is the fully-qualified name of the
	// OrganizationsService's CreateOrganization RPC.
	OrganizationsServiceCreateOrganizationProcedure = "/priv.organizations.v1alpha1.OrganizationsService/CreateOrganization"
	// OrganizationsServiceDeleteOrganizationProcedure is the fully-qualified name of the
	// OrganizationsService's DeleteOrganization RPC.
	OrganizationsServiceDeleteOrganizationProcedure = "/priv.organizations.v1alpha1.OrganizationsService/DeleteOrganization"
)

// OrganizationsServiceClient is a client for the priv.organizations.v1alpha1.OrganizationsService
// service.
type OrganizationsServiceClient interface {
	GetOrganization(context.Context, *connect_go.Request[v1alpha1.GetOrganizationRequest]) (*connect_go.Response[v1alpha1.GetOrganizationResponse], error)
	CreateOrganization(context.Context, *connect_go.Request[v1alpha1.CreateOrganizationRequest]) (*connect_go.Response[v1alpha1.CreateOrganizationResponse], error)
	DeleteOrganization(context.Context, *connect_go.Request[v1alpha1.DeleteOrganizationRequest]) (*connect_go.Response[v1alpha1.DeleteOrganizationResponse], error)
}

// NewOrganizationsServiceClient constructs a client for the
// priv.organizations.v1alpha1.OrganizationsService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrganizationsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OrganizationsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &organizationsServiceClient{
		getOrganization: connect_go.NewClient[v1alpha1.GetOrganizationRequest, v1alpha1.GetOrganizationResponse](
			httpClient,
			baseURL+OrganizationsServiceGetOrganizationProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		createOrganization: connect_go.NewClient[v1alpha1.CreateOrganizationRequest, v1alpha1.CreateOrganizationResponse](
			httpClient,
			baseURL+OrganizationsServiceCreateOrganizationProcedure,
			opts...,
		),
		deleteOrganization: connect_go.NewClient[v1alpha1.DeleteOrganizationRequest, v1alpha1.DeleteOrganizationResponse](
			httpClient,
			baseURL+OrganizationsServiceDeleteOrganizationProcedure,
			opts...,
		),
	}
}

// organizationsServiceClient implements OrganizationsServiceClient.
type organizationsServiceClient struct {
	getOrganization    *connect_go.Client[v1alpha1.GetOrganizationRequest, v1alpha1.GetOrganizationResponse]
	createOrganization *connect_go.Client[v1alpha1.CreateOrganizationRequest, v1alpha1.CreateOrganizationResponse]
	deleteOrganization *connect_go.Client[v1alpha1.DeleteOrganizationRequest, v1alpha1.DeleteOrganizationResponse]
}

// GetOrganization calls priv.organizations.v1alpha1.OrganizationsService.GetOrganization.
func (c *organizationsServiceClient) GetOrganization(ctx context.Context, req *connect_go.Request[v1alpha1.GetOrganizationRequest]) (*connect_go.Response[v1alpha1.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// CreateOrganization calls priv.organizations.v1alpha1.OrganizationsService.CreateOrganization.
func (c *organizationsServiceClient) CreateOrganization(ctx context.Context, req *connect_go.Request[v1alpha1.CreateOrganizationRequest]) (*connect_go.Response[v1alpha1.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// DeleteOrganization calls priv.organizations.v1alpha1.OrganizationsService.DeleteOrganization.
func (c *organizationsServiceClient) DeleteOrganization(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteOrganizationRequest]) (*connect_go.Response[v1alpha1.DeleteOrganizationResponse], error) {
	return c.deleteOrganization.CallUnary(ctx, req)
}

// OrganizationsServiceHandler is an implementation of the
// priv.organizations.v1alpha1.OrganizationsService service.
type OrganizationsServiceHandler interface {
	GetOrganization(context.Context, *connect_go.Request[v1alpha1.GetOrganizationRequest]) (*connect_go.Response[v1alpha1.GetOrganizationResponse], error)
	CreateOrganization(context.Context, *connect_go.Request[v1alpha1.CreateOrganizationRequest]) (*connect_go.Response[v1alpha1.CreateOrganizationResponse], error)
	DeleteOrganization(context.Context, *connect_go.Request[v1alpha1.DeleteOrganizationRequest]) (*connect_go.Response[v1alpha1.DeleteOrganizationResponse], error)
}

// NewOrganizationsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrganizationsServiceHandler(svc OrganizationsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	organizationsServiceGetOrganizationHandler := connect_go.NewUnaryHandler(
		OrganizationsServiceGetOrganizationProcedure,
		svc.GetOrganization,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	organizationsServiceCreateOrganizationHandler := connect_go.NewUnaryHandler(
		OrganizationsServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		opts...,
	)
	organizationsServiceDeleteOrganizationHandler := connect_go.NewUnaryHandler(
		OrganizationsServiceDeleteOrganizationProcedure,
		svc.DeleteOrganization,
		opts...,
	)
	return "/priv.organizations.v1alpha1.OrganizationsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrganizationsServiceGetOrganizationProcedure:
			organizationsServiceGetOrganizationHandler.ServeHTTP(w, r)
		case OrganizationsServiceCreateOrganizationProcedure:
			organizationsServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationsServiceDeleteOrganizationProcedure:
			organizationsServiceDeleteOrganizationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrganizationsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrganizationsServiceHandler struct{}

func (UnimplementedOrganizationsServiceHandler) GetOrganization(context.Context, *connect_go.Request[v1alpha1.GetOrganizationRequest]) (*connect_go.Response[v1alpha1.GetOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("priv.organizations.v1alpha1.OrganizationsService.GetOrganization is not implemented"))
}

func (UnimplementedOrganizationsServiceHandler) CreateOrganization(context.Context, *connect_go.Request[v1alpha1.CreateOrganizationRequest]) (*connect_go.Response[v1alpha1.CreateOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("priv.organizations.v1alpha1.OrganizationsService.CreateOrganization is not implemented"))
}

func (UnimplementedOrganizationsServiceHandler) DeleteOrganization(context.Context, *connect_go.Request[v1alpha1.DeleteOrganizationRequest]) (*connect_go.Response[v1alpha1.DeleteOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("priv.organizations.v1alpha1.OrganizationsService.DeleteOrganization is not implemented"))
}
