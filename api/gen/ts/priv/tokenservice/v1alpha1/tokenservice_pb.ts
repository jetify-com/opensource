//*
// API to manage token service

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file priv/tokenservice/v1alpha1/tokenservice.proto (package priv.tokenservice.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message priv.tokenservice.v1alpha1.GetAccessTokenRequest
 */
export class GetAccessTokenRequest extends Message<GetAccessTokenRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<GetAccessTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.tokenservice.v1alpha1.GetAccessTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccessTokenRequest {
    return new GetAccessTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccessTokenRequest {
    return new GetAccessTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccessTokenRequest {
    return new GetAccessTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccessTokenRequest | PlainMessage<GetAccessTokenRequest> | undefined, b: GetAccessTokenRequest | PlainMessage<GetAccessTokenRequest> | undefined): boolean {
    return proto3.util.equals(GetAccessTokenRequest, a, b);
  }
}

/**
 * @generated from message priv.tokenservice.v1alpha1.GetAccessTokenResponse
 */
export class GetAccessTokenResponse extends Message<GetAccessTokenResponse> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  constructor(data?: PartialMessage<GetAccessTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.tokenservice.v1alpha1.GetAccessTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccessTokenResponse {
    return new GetAccessTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccessTokenResponse {
    return new GetAccessTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccessTokenResponse {
    return new GetAccessTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccessTokenResponse | PlainMessage<GetAccessTokenResponse> | undefined, b: GetAccessTokenResponse | PlainMessage<GetAccessTokenResponse> | undefined): boolean {
    return proto3.util.equals(GetAccessTokenResponse, a, b);
  }
}

/**
 * @generated from message priv.tokenservice.v1alpha1.Token
 */
export class Token extends Message<Token> {
  /**
   * ID is public and represents the token in the DB.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Secret is private. We do not store secret in db (only hash)
   *
   * @generated from field: string secret = 2;
   */
  secret = "";

  /**
   * if needed. Not adding yet, because not needed.
   * org_id ? Could be "subject" instead since token may belong to org, user, project, etc
   * scopes ? Not sure we want to use scopes. I think rbac is probably better.
   *
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<Token>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.tokenservice.v1alpha1.Token";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Token {
    return new Token().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Token {
    return new Token().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Token {
    return new Token().fromJsonString(jsonString, options);
  }

  static equals(a: Token | PlainMessage<Token> | undefined, b: Token | PlainMessage<Token> | undefined): boolean {
    return proto3.util.equals(Token, a, b);
  }
}

/**
 * @generated from message priv.tokenservice.v1alpha1.CreateTokenRequest
 */
export class CreateTokenRequest extends Message<CreateTokenRequest> {
  constructor(data?: PartialMessage<CreateTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.tokenservice.v1alpha1.CreateTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTokenRequest {
    return new CreateTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTokenRequest {
    return new CreateTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTokenRequest {
    return new CreateTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTokenRequest | PlainMessage<CreateTokenRequest> | undefined, b: CreateTokenRequest | PlainMessage<CreateTokenRequest> | undefined): boolean {
    return proto3.util.equals(CreateTokenRequest, a, b);
  }
}

/**
 * @generated from message priv.tokenservice.v1alpha1.CreateTokenResponse
 */
export class CreateTokenResponse extends Message<CreateTokenResponse> {
  /**
   * @generated from field: priv.tokenservice.v1alpha1.Token token = 1;
   */
  token?: Token;

  constructor(data?: PartialMessage<CreateTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.tokenservice.v1alpha1.CreateTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: Token },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTokenResponse {
    return new CreateTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTokenResponse {
    return new CreateTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTokenResponse {
    return new CreateTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTokenResponse | PlainMessage<CreateTokenResponse> | undefined, b: CreateTokenResponse | PlainMessage<CreateTokenResponse> | undefined): boolean {
    return proto3.util.equals(CreateTokenResponse, a, b);
  }
}

