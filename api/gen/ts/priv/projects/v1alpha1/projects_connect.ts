//
// The projects service is written as a model endpoint that new endpoints should emulate.
// The comments in this file are written such that API documentation can be
// automatically generated from it.
// If you're adding an 'internal' comment, don't place it next to a field, method, or message.

//*
// API to manage projects

// @generated by protoc-gen-connect-es v1.4.0 with parameter "target=ts"
// @generated from file priv/projects/v1alpha1/projects.proto (package priv.projects.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CountProjectsWithDeploymentRequest, CountProjectsWithDeploymentResponse, CreateProjectRequest, CreateProjectResponse, DeleteProjectRequest, DeleteProjectResponse, GetProjectRequest, GetProjectResponse, ListProjectsRequest, ListProjectsResponse, PatchProjectRequest, PatchProjectResponse, SearchProjectsRequest, SearchProjectsResponse, UpdateProjectRequest, UpdateProjectResponse } from "./projects_pb.js";
import { MethodIdempotency, MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service priv.projects.v1alpha1.ProjectsService
 */
export const ProjectsService = {
  typeName: "priv.projects.v1alpha1.ProjectsService",
  methods: {
    /**
     * Get a project
     *
     * Retrieves the details of an existing project identified by its unique
     * project id.
     *
     * @generated from rpc priv.projects.v1alpha1.ProjectsService.GetProject
     */
    getProject: {
      name: "GetProject",
      I: GetProjectRequest,
      O: GetProjectResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * List the projects in an organization
     *
     * Lists the projects belonging to the given organization. The projects are
     * sorted by creation date, with the most recently created projects appearing
     * first.
     *
     * @generated from rpc priv.projects.v1alpha1.ProjectsService.ListProjects
     */
    listProjects: {
      name: "ListProjects",
      I: ListProjectsRequest,
      O: ListProjectsResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * Count the number of projects with Deployments
     *
     * Given an org_id, counts the number of projects in an organization that have
     * enabled deployments.
     *
     * @generated from rpc priv.projects.v1alpha1.ProjectsService.CountProjectsWithDeployment
     */
    countProjectsWithDeployment: {
      name: "CountProjectsWithDeployment",
      I: CountProjectsWithDeploymentRequest,
      O: CountProjectsWithDeploymentResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * Search for projects in an organization
     *
     * Searches for products previously created in the given organization.
     * Don't use search in read-after-write flows where strict consistency is
     * necessary.
     *
     * @generated from rpc priv.projects.v1alpha1.ProjectsService.SearchProjects
     */
    searchProjects: {
      name: "SearchProjects",
      I: SearchProjectsRequest,
      O: SearchProjectsResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * Create a new project
     *
     * Creates a new project in the specified organization. The authenticated user
     * must be a member of the organization.
     *
     * @generated from rpc priv.projects.v1alpha1.ProjectsService.CreateProject
     */
    createProject: {
      name: "CreateProject",
      I: CreateProjectRequest,
      O: CreateProjectResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a project
     *
     * Deletes the project specified by the given id.
     *
     * @generated from rpc priv.projects.v1alpha1.ProjectsService.DeleteProject
     */
    deleteProject: {
      name: "DeleteProject",
      I: DeleteProjectRequest,
      O: DeleteProjectResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Patch a project
     *
     * Patches the specified project with the provided fields. Any fields that
     * are not provided, will be left unchanged.
     *
     * @generated from rpc priv.projects.v1alpha1.ProjectsService.PatchProject
     */
    patchProject: {
      name: "PatchProject",
      I: PatchProjectRequest,
      O: PatchProjectResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update a project
     *
     * Updates the specified project by setting the values of the provided fields.
     * All fields will be updates. If you'd like to partially update some fields,
     * use Patch instead.
     *
     * @generated from rpc priv.projects.v1alpha1.ProjectsService.UpdateProject
     */
    updateProject: {
      name: "UpdateProject",
      I: UpdateProjectRequest,
      O: UpdateProjectResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

