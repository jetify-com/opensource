//*
// API to manage members of an organization.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file priv/members/v1alpha1/members.proto (package priv.members.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Organization } from "../../organizations/v1alpha1/organizations_pb.js";

/**
 * The member object
 *
 *
 * @generated from message priv.members.v1alpha1.Member
 */
export class Member extends Message<Member> {
  /**
   * Unique identifier for the object
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: priv.organizations.v1alpha1.Organization organization = 2;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<Member>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.members.v1alpha1.Member";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Member {
    return new Member().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Member {
    return new Member().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Member {
    return new Member().fromJsonString(jsonString, options);
  }

  static equals(a: Member | PlainMessage<Member> | undefined, b: Member | PlainMessage<Member> | undefined): boolean {
    return proto3.util.equals(Member, a, b);
  }
}

/**
 * @generated from message priv.members.v1alpha1.GetMemberRequest
 */
export class GetMemberRequest extends Message<GetMemberRequest> {
  /**
   * The unique identifier of the member to retrieve.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.members.v1alpha1.GetMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMemberRequest {
    return new GetMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMemberRequest {
    return new GetMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMemberRequest {
    return new GetMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMemberRequest | PlainMessage<GetMemberRequest> | undefined, b: GetMemberRequest | PlainMessage<GetMemberRequest> | undefined): boolean {
    return proto3.util.equals(GetMemberRequest, a, b);
  }
}

/**
 * @generated from message priv.members.v1alpha1.GetMemberResponse
 */
export class GetMemberResponse extends Message<GetMemberResponse> {
  /**
   * The requested member object.
   *
   * @generated from field: priv.members.v1alpha1.Member member = 1;
   */
  member?: Member;

  constructor(data?: PartialMessage<GetMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.members.v1alpha1.GetMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "member", kind: "message", T: Member },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMemberResponse {
    return new GetMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMemberResponse {
    return new GetMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMemberResponse {
    return new GetMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMemberResponse | PlainMessage<GetMemberResponse> | undefined, b: GetMemberResponse | PlainMessage<GetMemberResponse> | undefined): boolean {
    return proto3.util.equals(GetMemberResponse, a, b);
  }
}

/**
 * @generated from message priv.members.v1alpha1.CreateMemberRequest
 */
export class CreateMemberRequest extends Message<CreateMemberRequest> {
  /**
   * @generated from field: priv.members.v1alpha1.Member member = 1;
   */
  member?: Member;

  constructor(data?: PartialMessage<CreateMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.members.v1alpha1.CreateMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "member", kind: "message", T: Member },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMemberRequest {
    return new CreateMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMemberRequest {
    return new CreateMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMemberRequest {
    return new CreateMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMemberRequest | PlainMessage<CreateMemberRequest> | undefined, b: CreateMemberRequest | PlainMessage<CreateMemberRequest> | undefined): boolean {
    return proto3.util.equals(CreateMemberRequest, a, b);
  }
}

/**
 * @generated from message priv.members.v1alpha1.CreateMemberResponse
 */
export class CreateMemberResponse extends Message<CreateMemberResponse> {
  /**
   * @generated from field: priv.members.v1alpha1.Member member = 1;
   */
  member?: Member;

  constructor(data?: PartialMessage<CreateMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.members.v1alpha1.CreateMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "member", kind: "message", T: Member },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMemberResponse {
    return new CreateMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMemberResponse {
    return new CreateMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMemberResponse {
    return new CreateMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMemberResponse | PlainMessage<CreateMemberResponse> | undefined, b: CreateMemberResponse | PlainMessage<CreateMemberResponse> | undefined): boolean {
    return proto3.util.equals(CreateMemberResponse, a, b);
  }
}

/**
 * @generated from message priv.members.v1alpha1.DeleteMemberRequest
 */
export class DeleteMemberRequest extends Message<DeleteMemberRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.members.v1alpha1.DeleteMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMemberRequest {
    return new DeleteMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMemberRequest {
    return new DeleteMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMemberRequest {
    return new DeleteMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMemberRequest | PlainMessage<DeleteMemberRequest> | undefined, b: DeleteMemberRequest | PlainMessage<DeleteMemberRequest> | undefined): boolean {
    return proto3.util.equals(DeleteMemberRequest, a, b);
  }
}

/**
 * @generated from message priv.members.v1alpha1.DeleteMemberResponse
 */
export class DeleteMemberResponse extends Message<DeleteMemberResponse> {
  constructor(data?: PartialMessage<DeleteMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.members.v1alpha1.DeleteMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMemberResponse {
    return new DeleteMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMemberResponse {
    return new DeleteMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMemberResponse {
    return new DeleteMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMemberResponse | PlainMessage<DeleteMemberResponse> | undefined, b: DeleteMemberResponse | PlainMessage<DeleteMemberResponse> | undefined): boolean {
    return proto3.util.equals(DeleteMemberResponse, a, b);
  }
}

