// @generated by protoc-gen-connect-es v1.4.0 with parameter "target=ts"
// @generated from file priv/secrets/v1alpha1/secrets.proto (package priv.secrets.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BatchRequest, BatchResponse, DeleteSecretRequest, DeleteSecretResponse, ListSecretsRequest, ListSecretsResponse, PatchSecretRequest, PatchSecretResponse } from "./secrets_pb.js";
import { MethodIdempotency, MethodKind } from "@bufbuild/protobuf";

/**
 * SecretsService provides CRUD methods for Secrets, although
 * we omit CreateSecret for now. It also has helper group methods for listing
 * secrets and batch operations.
 *
 * @generated from service priv.secrets.v1alpha1.SecretsService
 */
export const SecretsService = {
  typeName: "priv.secrets.v1alpha1.SecretsService",
  methods: {
    /**
     * Batch composes multiple CRUD requests into a single request.
     *
     * @generated from rpc priv.secrets.v1alpha1.SecretsService.Batch
     */
    batch: {
      name: "Batch",
      I: BatchRequest,
      O: BatchResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteSecret deletes an existing Secret.
     *
     * @generated from rpc priv.secrets.v1alpha1.SecretsService.DeleteSecret
     */
    deleteSecret: {
      name: "DeleteSecret",
      I: DeleteSecretRequest,
      O: DeleteSecretResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListSecrets returns a list of Secrets for a given Project.
     *
     * @generated from rpc priv.secrets.v1alpha1.SecretsService.ListSecrets
     */
    listSecrets: {
      name: "ListSecrets",
      I: ListSecretsRequest,
      O: ListSecretsResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * PatchSecret partially updates an existing Secret, or creates it if it doesn't exist.
     *
     * @generated from rpc priv.secrets.v1alpha1.SecretsService.PatchSecret
     */
    patchSecret: {
      name: "PatchSecret",
      I: PatchSecretRequest,
      O: PatchSecretResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

