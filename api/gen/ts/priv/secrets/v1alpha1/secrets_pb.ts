// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file priv/secrets/v1alpha1/secrets.proto (package priv.secrets.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Secret is a resource that represents a Jetify Secret inside a Project.
 *
 * NOTE: in this Secrets API, `org_id` is implicitly part of this API. We assume
 * that `org_id` will be retrieved from the Authorization JWT token.
 *
 * id is a unique identifier of this Secret within its Project.
 * Reserving for now to stay compliant with this guideline, but not implementing.
 * https://cloud.google.com/apis/design/resource_names#resource_name_as_string
 * string id = 1;
 *
 * @generated from message priv.secrets.v1alpha1.Secret
 */
export class Secret extends Message<Secret> {
  /**
   * name for the secret
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * environment_values is a map of environment name to value.
   * The environment name *must* be one of: 'dev', 'preview' or 'prod', and
   * the name must be all lowercase. In the future, this constraint may be
   * relaxed to allow dynamically defined environments.
   *
   * @generated from field: map<string, bytes> environment_values = 3;
   */
  environmentValues: { [key: string]: Uint8Array } = {};

  constructor(data?: PartialMessage<Secret>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.secrets.v1alpha1.Secret";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment_values", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Secret {
    return new Secret().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Secret {
    return new Secret().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Secret {
    return new Secret().fromJsonString(jsonString, options);
  }

  static equals(a: Secret | PlainMessage<Secret> | undefined, b: Secret | PlainMessage<Secret> | undefined): boolean {
    return proto3.util.equals(Secret, a, b);
  }
}

/**
 * @generated from message priv.secrets.v1alpha1.ListSecretsRequest
 */
export class ListSecretsRequest extends Message<ListSecretsRequest> {
  /**
   * project_id is the Project that this secret is namespaced within
   * E.g. "projects/proj_sdfasdlfkj"
   * In the future, we could have Org-level secrets, which are shared across Projects,
   * for which a new field may be introduced.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  constructor(data?: PartialMessage<ListSecretsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.secrets.v1alpha1.ListSecretsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecretsRequest {
    return new ListSecretsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecretsRequest {
    return new ListSecretsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecretsRequest {
    return new ListSecretsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecretsRequest | PlainMessage<ListSecretsRequest> | undefined, b: ListSecretsRequest | PlainMessage<ListSecretsRequest> | undefined): boolean {
    return proto3.util.equals(ListSecretsRequest, a, b);
  }
}

/**
 * @generated from message priv.secrets.v1alpha1.ListSecretsResponse
 */
export class ListSecretsResponse extends Message<ListSecretsResponse> {
  /**
   * @generated from field: repeated priv.secrets.v1alpha1.Secret secrets = 1;
   */
  secrets: Secret[] = [];

  constructor(data?: PartialMessage<ListSecretsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.secrets.v1alpha1.ListSecretsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secrets", kind: "message", T: Secret, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSecretsResponse {
    return new ListSecretsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSecretsResponse {
    return new ListSecretsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSecretsResponse {
    return new ListSecretsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSecretsResponse | PlainMessage<ListSecretsResponse> | undefined, b: ListSecretsResponse | PlainMessage<ListSecretsResponse> | undefined): boolean {
    return proto3.util.equals(ListSecretsResponse, a, b);
  }
}

/**
 * @generated from message priv.secrets.v1alpha1.PatchSecretRequest
 */
export class PatchSecretRequest extends Message<PatchSecretRequest> {
  /**
   * project_id is the Project that this secret is namespaced within
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * secret is the Secret to patch. If the Secret does not exist, it will be created.
   * It can also be somewhat partial, in that it must have name and value but
   * the environment_values map can be selectively filled.
   *
   * @generated from field: priv.secrets.v1alpha1.Secret secret = 2;
   */
  secret?: Secret;

  constructor(data?: PartialMessage<PatchSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.secrets.v1alpha1.PatchSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secret", kind: "message", T: Secret },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchSecretRequest {
    return new PatchSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchSecretRequest {
    return new PatchSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchSecretRequest {
    return new PatchSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchSecretRequest | PlainMessage<PatchSecretRequest> | undefined, b: PatchSecretRequest | PlainMessage<PatchSecretRequest> | undefined): boolean {
    return proto3.util.equals(PatchSecretRequest, a, b);
  }
}

/**
 * @generated from message priv.secrets.v1alpha1.PatchSecretResponse
 */
export class PatchSecretResponse extends Message<PatchSecretResponse> {
  constructor(data?: PartialMessage<PatchSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.secrets.v1alpha1.PatchSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchSecretResponse {
    return new PatchSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchSecretResponse {
    return new PatchSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchSecretResponse {
    return new PatchSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PatchSecretResponse | PlainMessage<PatchSecretResponse> | undefined, b: PatchSecretResponse | PlainMessage<PatchSecretResponse> | undefined): boolean {
    return proto3.util.equals(PatchSecretResponse, a, b);
  }
}

/**
 * @generated from message priv.secrets.v1alpha1.DeleteSecretRequest
 */
export class DeleteSecretRequest extends Message<DeleteSecretRequest> {
  /**
   * project_id is the Project that this secret is namespaced within
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * secret_name is the name of the Secret to delete
   *
   * @generated from field: string secret_name = 2;
   */
  secretName = "";

  /**
   * environments must be one of: 'dev', 'preview' or 'prod'
   *
   * @generated from field: repeated string environments = 3;
   */
  environments: string[] = [];

  constructor(data?: PartialMessage<DeleteSecretRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.secrets.v1alpha1.DeleteSecretRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secret_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSecretRequest {
    return new DeleteSecretRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSecretRequest {
    return new DeleteSecretRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSecretRequest {
    return new DeleteSecretRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSecretRequest | PlainMessage<DeleteSecretRequest> | undefined, b: DeleteSecretRequest | PlainMessage<DeleteSecretRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSecretRequest, a, b);
  }
}

/**
 * @generated from message priv.secrets.v1alpha1.DeleteSecretResponse
 */
export class DeleteSecretResponse extends Message<DeleteSecretResponse> {
  constructor(data?: PartialMessage<DeleteSecretResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.secrets.v1alpha1.DeleteSecretResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSecretResponse {
    return new DeleteSecretResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSecretResponse {
    return new DeleteSecretResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSecretResponse {
    return new DeleteSecretResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSecretResponse | PlainMessage<DeleteSecretResponse> | undefined, b: DeleteSecretResponse | PlainMessage<DeleteSecretResponse> | undefined): boolean {
    return proto3.util.equals(DeleteSecretResponse, a, b);
  }
}

/**
 * Action is designed to represent a CRUD operation on a single Secret
 *
 * @generated from message priv.secrets.v1alpha1.Action
 */
export class Action extends Message<Action> {
  /**
   * @generated from oneof priv.secrets.v1alpha1.Action.action
   */
  action: {
    /**
     * Reserving for future CRUD operations we may introduce
     * CreateSecretRequest create_secret = 1;
     * UpdateSecretRequest create_secret = 2;
     *
     * @generated from field: priv.secrets.v1alpha1.PatchSecretRequest patch_secret = 3;
     */
    value: PatchSecretRequest;
    case: "patchSecret";
  } | {
    /**
     * @generated from field: priv.secrets.v1alpha1.DeleteSecretRequest delete_secret = 4;
     */
    value: DeleteSecretRequest;
    case: "deleteSecret";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Action>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.secrets.v1alpha1.Action";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "patch_secret", kind: "message", T: PatchSecretRequest, oneof: "action" },
    { no: 4, name: "delete_secret", kind: "message", T: DeleteSecretRequest, oneof: "action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Action {
    return new Action().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Action {
    return new Action().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Action {
    return new Action().fromJsonString(jsonString, options);
  }

  static equals(a: Action | PlainMessage<Action> | undefined, b: Action | PlainMessage<Action> | undefined): boolean {
    return proto3.util.equals(Action, a, b);
  }
}

/**
 * BatchRequest composes Actions to apply multiple CRUD methods in a single request.
 *
 * @generated from message priv.secrets.v1alpha1.BatchRequest
 */
export class BatchRequest extends Message<BatchRequest> {
  /**
   * @generated from field: repeated priv.secrets.v1alpha1.Action actions = 1;
   */
  actions: Action[] = [];

  constructor(data?: PartialMessage<BatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.secrets.v1alpha1.BatchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actions", kind: "message", T: Action, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchRequest {
    return new BatchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchRequest {
    return new BatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchRequest {
    return new BatchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchRequest | PlainMessage<BatchRequest> | undefined, b: BatchRequest | PlainMessage<BatchRequest> | undefined): boolean {
    return proto3.util.equals(BatchRequest, a, b);
  }
}

/**
 * @generated from message priv.secrets.v1alpha1.BatchResponse
 */
export class BatchResponse extends Message<BatchResponse> {
  constructor(data?: PartialMessage<BatchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.secrets.v1alpha1.BatchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchResponse {
    return new BatchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchResponse {
    return new BatchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchResponse {
    return new BatchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchResponse | PlainMessage<BatchResponse> | undefined, b: BatchResponse | PlainMessage<BatchResponse> | undefined): boolean {
    return proto3.util.equals(BatchResponse, a, b);
  }
}

