//*
// API to manage nix features

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file priv/nix/v1alpha1/nix.proto (package priv.nix.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum priv.nix.v1alpha1.Permission
 */
export enum Permission {
  /**
   * @generated from enum value: PERMISSION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PERMISSION_READ = 1;
   */
  READ = 1,

  /**
   * @generated from enum value: PERMISSION_WRITE = 2;
   */
  WRITE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Permission)
proto3.util.setEnumType(Permission, "priv.nix.v1alpha1.Permission", [
  { no: 0, name: "PERMISSION_UNSPECIFIED" },
  { no: 1, name: "PERMISSION_READ" },
  { no: 2, name: "PERMISSION_WRITE" },
]);

/**
 * @generated from message priv.nix.v1alpha1.GetBinCacheRequest
 */
export class GetBinCacheRequest extends Message<GetBinCacheRequest> {
  constructor(data?: PartialMessage<GetBinCacheRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.nix.v1alpha1.GetBinCacheRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBinCacheRequest {
    return new GetBinCacheRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBinCacheRequest {
    return new GetBinCacheRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBinCacheRequest {
    return new GetBinCacheRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBinCacheRequest | PlainMessage<GetBinCacheRequest> | undefined, b: GetBinCacheRequest | PlainMessage<GetBinCacheRequest> | undefined): boolean {
    return proto3.util.equals(GetBinCacheRequest, a, b);
  }
}

/**
 * @generated from message priv.nix.v1alpha1.GetBinCacheResponse
 */
export class GetBinCacheResponse extends Message<GetBinCacheResponse> {
  /**
   * nix_bin_cache_uri is used by devbox 0.10.7 and below
   *
   * @generated from field: string nix_bin_cache_uri = 2 [deprecated = true];
   * @deprecated
   */
  nixBinCacheUri = "";

  /**
   * @generated from field: repeated priv.nix.v1alpha1.NixBinCache caches = 4;
   */
  caches: NixBinCache[] = [];

  constructor(data?: PartialMessage<GetBinCacheResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.nix.v1alpha1.GetBinCacheResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "nix_bin_cache_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "caches", kind: "message", T: NixBinCache, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBinCacheResponse {
    return new GetBinCacheResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBinCacheResponse {
    return new GetBinCacheResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBinCacheResponse {
    return new GetBinCacheResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBinCacheResponse | PlainMessage<GetBinCacheResponse> | undefined, b: GetBinCacheResponse | PlainMessage<GetBinCacheResponse> | undefined): boolean {
    return proto3.util.equals(GetBinCacheResponse, a, b);
  }
}

/**
 * @generated from message priv.nix.v1alpha1.GetAWSCredentialsRequest
 */
export class GetAWSCredentialsRequest extends Message<GetAWSCredentialsRequest> {
  constructor(data?: PartialMessage<GetAWSCredentialsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.nix.v1alpha1.GetAWSCredentialsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAWSCredentialsRequest {
    return new GetAWSCredentialsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAWSCredentialsRequest {
    return new GetAWSCredentialsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAWSCredentialsRequest {
    return new GetAWSCredentialsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAWSCredentialsRequest | PlainMessage<GetAWSCredentialsRequest> | undefined, b: GetAWSCredentialsRequest | PlainMessage<GetAWSCredentialsRequest> | undefined): boolean {
    return proto3.util.equals(GetAWSCredentialsRequest, a, b);
  }
}

/**
 * @generated from message priv.nix.v1alpha1.GetAWSCredentialsResponse
 */
export class GetAWSCredentialsResponse extends Message<GetAWSCredentialsResponse> {
  /**
   * @generated from field: priv.nix.v1alpha1.AWSCredentials credentials = 1;
   */
  credentials?: AWSCredentials;

  constructor(data?: PartialMessage<GetAWSCredentialsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.nix.v1alpha1.GetAWSCredentialsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "credentials", kind: "message", T: AWSCredentials },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAWSCredentialsResponse {
    return new GetAWSCredentialsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAWSCredentialsResponse {
    return new GetAWSCredentialsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAWSCredentialsResponse {
    return new GetAWSCredentialsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAWSCredentialsResponse | PlainMessage<GetAWSCredentialsResponse> | undefined, b: GetAWSCredentialsResponse | PlainMessage<GetAWSCredentialsResponse> | undefined): boolean {
    return proto3.util.equals(GetAWSCredentialsResponse, a, b);
  }
}

/**
 * @generated from message priv.nix.v1alpha1.AWSCredentials
 */
export class AWSCredentials extends Message<AWSCredentials> {
  /**
   * @generated from field: string access_key_id = 1;
   */
  accessKeyId = "";

  /**
   * @generated from field: string secret_key = 2;
   */
  secretKey = "";

  /**
   * @generated from field: string session_token = 3;
   */
  sessionToken = "";

  /**
   * @generated from field: google.protobuf.Timestamp expiration = 4;
   */
  expiration?: Timestamp;

  constructor(data?: PartialMessage<AWSCredentials>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.nix.v1alpha1.AWSCredentials";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secret_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "session_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "expiration", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AWSCredentials {
    return new AWSCredentials().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AWSCredentials {
    return new AWSCredentials().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AWSCredentials {
    return new AWSCredentials().fromJsonString(jsonString, options);
  }

  static equals(a: AWSCredentials | PlainMessage<AWSCredentials> | undefined, b: AWSCredentials | PlainMessage<AWSCredentials> | undefined): boolean {
    return proto3.util.equals(AWSCredentials, a, b);
  }
}

/**
 * @generated from message priv.nix.v1alpha1.NixBinCache
 */
export class NixBinCache extends Message<NixBinCache> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = "";

  /**
   * @generated from field: repeated priv.nix.v1alpha1.Permission permissions = 2;
   */
  permissions: Permission[] = [];

  constructor(data?: PartialMessage<NixBinCache>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "priv.nix.v1alpha1.NixBinCache";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permissions", kind: "enum", T: proto3.getEnumType(Permission), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NixBinCache {
    return new NixBinCache().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NixBinCache {
    return new NixBinCache().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NixBinCache {
    return new NixBinCache().fromJsonString(jsonString, options);
  }

  static equals(a: NixBinCache | PlainMessage<NixBinCache> | undefined, b: NixBinCache | PlainMessage<NixBinCache> | undefined): boolean {
    return proto3.util.equals(NixBinCache, a, b);
  }
}

