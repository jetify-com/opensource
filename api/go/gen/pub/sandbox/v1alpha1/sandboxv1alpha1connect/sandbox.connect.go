//*
// API to manage Jetify Sandbox environments

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pub/sandbox/v1alpha1/sandbox.proto

package sandboxv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "go.jetpack.io/axiom/api/gen/pub/sandbox/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SandboxServiceName is the fully-qualified name of the SandboxService service.
	SandboxServiceName = "pub.sandbox.v1alpha1.SandboxService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SandboxServiceCreateSandboxProcedure is the fully-qualified name of the SandboxService's
	// CreateSandbox RPC.
	SandboxServiceCreateSandboxProcedure = "/pub.sandbox.v1alpha1.SandboxService/CreateSandbox"
	// SandboxServiceGetSandboxProcedure is the fully-qualified name of the SandboxService's GetSandbox
	// RPC.
	SandboxServiceGetSandboxProcedure = "/pub.sandbox.v1alpha1.SandboxService/GetSandbox"
	// SandboxServiceDeleteSandboxProcedure is the fully-qualified name of the SandboxService's
	// DeleteSandbox RPC.
	SandboxServiceDeleteSandboxProcedure = "/pub.sandbox.v1alpha1.SandboxService/DeleteSandbox"
	// SandboxServiceListSandboxesProcedure is the fully-qualified name of the SandboxService's
	// ListSandboxes RPC.
	SandboxServiceListSandboxesProcedure = "/pub.sandbox.v1alpha1.SandboxService/ListSandboxes"
	// SandboxServiceStartSandboxProcedure is the fully-qualified name of the SandboxService's
	// StartSandbox RPC.
	SandboxServiceStartSandboxProcedure = "/pub.sandbox.v1alpha1.SandboxService/StartSandbox"
	// SandboxServiceStopSandboxProcedure is the fully-qualified name of the SandboxService's
	// StopSandbox RPC.
	SandboxServiceStopSandboxProcedure = "/pub.sandbox.v1alpha1.SandboxService/StopSandbox"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sandboxServiceServiceDescriptor             = v1alpha1.File_pub_sandbox_v1alpha1_sandbox_proto.Services().ByName("SandboxService")
	sandboxServiceCreateSandboxMethodDescriptor = sandboxServiceServiceDescriptor.Methods().ByName("CreateSandbox")
	sandboxServiceGetSandboxMethodDescriptor    = sandboxServiceServiceDescriptor.Methods().ByName("GetSandbox")
	sandboxServiceDeleteSandboxMethodDescriptor = sandboxServiceServiceDescriptor.Methods().ByName("DeleteSandbox")
	sandboxServiceListSandboxesMethodDescriptor = sandboxServiceServiceDescriptor.Methods().ByName("ListSandboxes")
	sandboxServiceStartSandboxMethodDescriptor  = sandboxServiceServiceDescriptor.Methods().ByName("StartSandbox")
	sandboxServiceStopSandboxMethodDescriptor   = sandboxServiceServiceDescriptor.Methods().ByName("StopSandbox")
)

// SandboxServiceClient is a client for the pub.sandbox.v1alpha1.SandboxService service.
type SandboxServiceClient interface {
	CreateSandbox(context.Context, *connect.Request[v1alpha1.CreateSandboxRequest]) (*connect.Response[v1alpha1.CreateSandboxResponse], error)
	GetSandbox(context.Context, *connect.Request[v1alpha1.GetSandboxRequest]) (*connect.Response[v1alpha1.GetSandboxResponse], error)
	DeleteSandbox(context.Context, *connect.Request[v1alpha1.DeleteSandboxRequest]) (*connect.Response[v1alpha1.DeleteSandboxResponse], error)
	ListSandboxes(context.Context, *connect.Request[v1alpha1.ListSandboxesRequest]) (*connect.Response[v1alpha1.ListSandboxesResponse], error)
	// Starts sandbox. If sandbox is already starting or running, it does nothing.
	// May return error if sandbox is stopping.
	StartSandbox(context.Context, *connect.Request[v1alpha1.StartSandboxRequest]) (*connect.Response[v1alpha1.StartSandboxResponse], error)
	// Stops sandbox. If sandbox is already stopped, it does nothing.
	// May return error if sandbox is starting.
	StopSandbox(context.Context, *connect.Request[v1alpha1.StopSandboxRequest]) (*connect.Response[v1alpha1.StopSandboxResponse], error)
}

// NewSandboxServiceClient constructs a client for the pub.sandbox.v1alpha1.SandboxService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSandboxServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SandboxServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sandboxServiceClient{
		createSandbox: connect.NewClient[v1alpha1.CreateSandboxRequest, v1alpha1.CreateSandboxResponse](
			httpClient,
			baseURL+SandboxServiceCreateSandboxProcedure,
			connect.WithSchema(sandboxServiceCreateSandboxMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSandbox: connect.NewClient[v1alpha1.GetSandboxRequest, v1alpha1.GetSandboxResponse](
			httpClient,
			baseURL+SandboxServiceGetSandboxProcedure,
			connect.WithSchema(sandboxServiceGetSandboxMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSandbox: connect.NewClient[v1alpha1.DeleteSandboxRequest, v1alpha1.DeleteSandboxResponse](
			httpClient,
			baseURL+SandboxServiceDeleteSandboxProcedure,
			connect.WithSchema(sandboxServiceDeleteSandboxMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		listSandboxes: connect.NewClient[v1alpha1.ListSandboxesRequest, v1alpha1.ListSandboxesResponse](
			httpClient,
			baseURL+SandboxServiceListSandboxesProcedure,
			connect.WithSchema(sandboxServiceListSandboxesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		startSandbox: connect.NewClient[v1alpha1.StartSandboxRequest, v1alpha1.StartSandboxResponse](
			httpClient,
			baseURL+SandboxServiceStartSandboxProcedure,
			connect.WithSchema(sandboxServiceStartSandboxMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stopSandbox: connect.NewClient[v1alpha1.StopSandboxRequest, v1alpha1.StopSandboxResponse](
			httpClient,
			baseURL+SandboxServiceStopSandboxProcedure,
			connect.WithSchema(sandboxServiceStopSandboxMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sandboxServiceClient implements SandboxServiceClient.
type sandboxServiceClient struct {
	createSandbox *connect.Client[v1alpha1.CreateSandboxRequest, v1alpha1.CreateSandboxResponse]
	getSandbox    *connect.Client[v1alpha1.GetSandboxRequest, v1alpha1.GetSandboxResponse]
	deleteSandbox *connect.Client[v1alpha1.DeleteSandboxRequest, v1alpha1.DeleteSandboxResponse]
	listSandboxes *connect.Client[v1alpha1.ListSandboxesRequest, v1alpha1.ListSandboxesResponse]
	startSandbox  *connect.Client[v1alpha1.StartSandboxRequest, v1alpha1.StartSandboxResponse]
	stopSandbox   *connect.Client[v1alpha1.StopSandboxRequest, v1alpha1.StopSandboxResponse]
}

// CreateSandbox calls pub.sandbox.v1alpha1.SandboxService.CreateSandbox.
func (c *sandboxServiceClient) CreateSandbox(ctx context.Context, req *connect.Request[v1alpha1.CreateSandboxRequest]) (*connect.Response[v1alpha1.CreateSandboxResponse], error) {
	return c.createSandbox.CallUnary(ctx, req)
}

// GetSandbox calls pub.sandbox.v1alpha1.SandboxService.GetSandbox.
func (c *sandboxServiceClient) GetSandbox(ctx context.Context, req *connect.Request[v1alpha1.GetSandboxRequest]) (*connect.Response[v1alpha1.GetSandboxResponse], error) {
	return c.getSandbox.CallUnary(ctx, req)
}

// DeleteSandbox calls pub.sandbox.v1alpha1.SandboxService.DeleteSandbox.
func (c *sandboxServiceClient) DeleteSandbox(ctx context.Context, req *connect.Request[v1alpha1.DeleteSandboxRequest]) (*connect.Response[v1alpha1.DeleteSandboxResponse], error) {
	return c.deleteSandbox.CallUnary(ctx, req)
}

// ListSandboxes calls pub.sandbox.v1alpha1.SandboxService.ListSandboxes.
func (c *sandboxServiceClient) ListSandboxes(ctx context.Context, req *connect.Request[v1alpha1.ListSandboxesRequest]) (*connect.Response[v1alpha1.ListSandboxesResponse], error) {
	return c.listSandboxes.CallUnary(ctx, req)
}

// StartSandbox calls pub.sandbox.v1alpha1.SandboxService.StartSandbox.
func (c *sandboxServiceClient) StartSandbox(ctx context.Context, req *connect.Request[v1alpha1.StartSandboxRequest]) (*connect.Response[v1alpha1.StartSandboxResponse], error) {
	return c.startSandbox.CallUnary(ctx, req)
}

// StopSandbox calls pub.sandbox.v1alpha1.SandboxService.StopSandbox.
func (c *sandboxServiceClient) StopSandbox(ctx context.Context, req *connect.Request[v1alpha1.StopSandboxRequest]) (*connect.Response[v1alpha1.StopSandboxResponse], error) {
	return c.stopSandbox.CallUnary(ctx, req)
}

// SandboxServiceHandler is an implementation of the pub.sandbox.v1alpha1.SandboxService service.
type SandboxServiceHandler interface {
	CreateSandbox(context.Context, *connect.Request[v1alpha1.CreateSandboxRequest]) (*connect.Response[v1alpha1.CreateSandboxResponse], error)
	GetSandbox(context.Context, *connect.Request[v1alpha1.GetSandboxRequest]) (*connect.Response[v1alpha1.GetSandboxResponse], error)
	DeleteSandbox(context.Context, *connect.Request[v1alpha1.DeleteSandboxRequest]) (*connect.Response[v1alpha1.DeleteSandboxResponse], error)
	ListSandboxes(context.Context, *connect.Request[v1alpha1.ListSandboxesRequest]) (*connect.Response[v1alpha1.ListSandboxesResponse], error)
	// Starts sandbox. If sandbox is already starting or running, it does nothing.
	// May return error if sandbox is stopping.
	StartSandbox(context.Context, *connect.Request[v1alpha1.StartSandboxRequest]) (*connect.Response[v1alpha1.StartSandboxResponse], error)
	// Stops sandbox. If sandbox is already stopped, it does nothing.
	// May return error if sandbox is starting.
	StopSandbox(context.Context, *connect.Request[v1alpha1.StopSandboxRequest]) (*connect.Response[v1alpha1.StopSandboxResponse], error)
}

// NewSandboxServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSandboxServiceHandler(svc SandboxServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sandboxServiceCreateSandboxHandler := connect.NewUnaryHandler(
		SandboxServiceCreateSandboxProcedure,
		svc.CreateSandbox,
		connect.WithSchema(sandboxServiceCreateSandboxMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sandboxServiceGetSandboxHandler := connect.NewUnaryHandler(
		SandboxServiceGetSandboxProcedure,
		svc.GetSandbox,
		connect.WithSchema(sandboxServiceGetSandboxMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sandboxServiceDeleteSandboxHandler := connect.NewUnaryHandler(
		SandboxServiceDeleteSandboxProcedure,
		svc.DeleteSandbox,
		connect.WithSchema(sandboxServiceDeleteSandboxMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	sandboxServiceListSandboxesHandler := connect.NewUnaryHandler(
		SandboxServiceListSandboxesProcedure,
		svc.ListSandboxes,
		connect.WithSchema(sandboxServiceListSandboxesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	sandboxServiceStartSandboxHandler := connect.NewUnaryHandler(
		SandboxServiceStartSandboxProcedure,
		svc.StartSandbox,
		connect.WithSchema(sandboxServiceStartSandboxMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sandboxServiceStopSandboxHandler := connect.NewUnaryHandler(
		SandboxServiceStopSandboxProcedure,
		svc.StopSandbox,
		connect.WithSchema(sandboxServiceStopSandboxMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pub.sandbox.v1alpha1.SandboxService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SandboxServiceCreateSandboxProcedure:
			sandboxServiceCreateSandboxHandler.ServeHTTP(w, r)
		case SandboxServiceGetSandboxProcedure:
			sandboxServiceGetSandboxHandler.ServeHTTP(w, r)
		case SandboxServiceDeleteSandboxProcedure:
			sandboxServiceDeleteSandboxHandler.ServeHTTP(w, r)
		case SandboxServiceListSandboxesProcedure:
			sandboxServiceListSandboxesHandler.ServeHTTP(w, r)
		case SandboxServiceStartSandboxProcedure:
			sandboxServiceStartSandboxHandler.ServeHTTP(w, r)
		case SandboxServiceStopSandboxProcedure:
			sandboxServiceStopSandboxHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSandboxServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSandboxServiceHandler struct{}

func (UnimplementedSandboxServiceHandler) CreateSandbox(context.Context, *connect.Request[v1alpha1.CreateSandboxRequest]) (*connect.Response[v1alpha1.CreateSandboxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pub.sandbox.v1alpha1.SandboxService.CreateSandbox is not implemented"))
}

func (UnimplementedSandboxServiceHandler) GetSandbox(context.Context, *connect.Request[v1alpha1.GetSandboxRequest]) (*connect.Response[v1alpha1.GetSandboxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pub.sandbox.v1alpha1.SandboxService.GetSandbox is not implemented"))
}

func (UnimplementedSandboxServiceHandler) DeleteSandbox(context.Context, *connect.Request[v1alpha1.DeleteSandboxRequest]) (*connect.Response[v1alpha1.DeleteSandboxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pub.sandbox.v1alpha1.SandboxService.DeleteSandbox is not implemented"))
}

func (UnimplementedSandboxServiceHandler) ListSandboxes(context.Context, *connect.Request[v1alpha1.ListSandboxesRequest]) (*connect.Response[v1alpha1.ListSandboxesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pub.sandbox.v1alpha1.SandboxService.ListSandboxes is not implemented"))
}

func (UnimplementedSandboxServiceHandler) StartSandbox(context.Context, *connect.Request[v1alpha1.StartSandboxRequest]) (*connect.Response[v1alpha1.StartSandboxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pub.sandbox.v1alpha1.SandboxService.StartSandbox is not implemented"))
}

func (UnimplementedSandboxServiceHandler) StopSandbox(context.Context, *connect.Request[v1alpha1.StopSandboxRequest]) (*connect.Response[v1alpha1.StopSandboxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pub.sandbox.v1alpha1.SandboxService.StopSandbox is not implemented"))
}
